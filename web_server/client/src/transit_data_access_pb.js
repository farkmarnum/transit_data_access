/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('../node_modules/google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.transit_data_access.DataFull', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.RouteInfo', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.StationInfo', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.StationInfo.TravelTime', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.TransfersForStation', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.TripInfo', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.TripInfo.Branch', null, global);
goog.exportSymbol('proto.transit_data_access.DataFull.TripInfo.TripStatus', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.ArrivalsDiff', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.Branch', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.StationArrival', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.StationArrivalsList', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.StationsList', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.Trip', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.Trip.TripInfo', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.TripDiff', null, global);
goog.exportSymbol('proto.transit_data_access.DataUpdate.TripStationDict', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataFull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.displayName = 'proto.transit_data_access.DataFull';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.RouteInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.transit_data_access.DataFull.RouteInfo.repeatedFields_, null);
};
goog.inherits(proto.transit_data_access.DataFull.RouteInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.RouteInfo.displayName = 'proto.transit_data_access.DataFull.RouteInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.StationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataFull.StationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.StationInfo.displayName = 'proto.transit_data_access.DataFull.StationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataFull.StationInfo.TravelTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.StationInfo.TravelTime.displayName = 'proto.transit_data_access.DataFull.StationInfo.TravelTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.TransfersForStation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataFull.TransfersForStation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.TransfersForStation.displayName = 'proto.transit_data_access.DataFull.TransfersForStation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.TripInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataFull.TripInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.TripInfo.displayName = 'proto.transit_data_access.DataFull.TripInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataFull.TripInfo.Branch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataFull.TripInfo.Branch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataFull.TripInfo.Branch.displayName = 'proto.transit_data_access.DataFull.TripInfo.Branch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.displayName = 'proto.transit_data_access.DataUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.Branch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.Branch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.Branch.displayName = 'proto.transit_data_access.DataUpdate.Branch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.Trip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.Trip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.Trip.displayName = 'proto.transit_data_access.DataUpdate.Trip';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.Trip.TripInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.Trip.TripInfo.displayName = 'proto.transit_data_access.DataUpdate.Trip.TripInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.TripDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.transit_data_access.DataUpdate.TripDiff.repeatedFields_, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.TripDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.TripDiff.displayName = 'proto.transit_data_access.DataUpdate.TripDiff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.StationsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.transit_data_access.DataUpdate.StationsList.repeatedFields_, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.StationsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.StationsList.displayName = 'proto.transit_data_access.DataUpdate.StationsList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.StationArrival = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.StationArrival, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.StationArrival.displayName = 'proto.transit_data_access.DataUpdate.StationArrival';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.StationArrivalsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.transit_data_access.DataUpdate.StationArrivalsList.repeatedFields_, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.StationArrivalsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.StationArrivalsList.displayName = 'proto.transit_data_access.DataUpdate.StationArrivalsList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.TripStationDict = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.TripStationDict, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.TripStationDict.displayName = 'proto.transit_data_access.DataUpdate.TripStationDict';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.transit_data_access.DataUpdate.ArrivalsDiff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transit_data_access.DataUpdate.ArrivalsDiff.displayName = 'proto.transit_data_access.DataUpdate.ArrivalsDiff';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1001, ""),
    staticTimestamp: jspb.Message.getFieldWithDefault(msg, 1002, 0),
    realtimeTimestamp: jspb.Message.getFieldWithDefault(msg, 1003, 0),
    routesMap: (f = msg.getRoutesMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataFull.RouteInfo.toObject) : [],
    stationsMap: (f = msg.getStationsMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataFull.StationInfo.toObject) : [],
    routehashLookupMap: (f = msg.getRoutehashLookupMap()) ? f.toObject(includeInstance, undefined) : [],
    stationhashLookupMap: (f = msg.getStationhashLookupMap()) ? f.toObject(includeInstance, undefined) : [],
    transfersMap: (f = msg.getTransfersMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataFull.TransfersForStation.toObject) : [],
    tripsMap: (f = msg.getTripsMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataFull.TripInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull}
 */
proto.transit_data_access.DataFull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull;
  return proto.transit_data_access.DataFull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull}
 */
proto.transit_data_access.DataFull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1001:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 1002:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStaticTimestamp(value);
      break;
    case 1003:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRealtimeTimestamp(value);
      break;
    case 1009:
      var value = msg.getRoutesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataFull.RouteInfo.deserializeBinaryFromReader, 0);
         });
      break;
    case 1010:
      var value = msg.getStationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataFull.StationInfo.deserializeBinaryFromReader, 0);
         });
      break;
    case 1011:
      var value = msg.getRoutehashLookupMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    case 1012:
      var value = msg.getStationhashLookupMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    case 1015:
      var value = msg.getTransfersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataFull.TransfersForStation.deserializeBinaryFromReader, 0);
         });
      break;
    case 1016:
      var value = msg.getTripsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataFull.TripInfo.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1001,
      f
    );
  }
  f = message.getStaticTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1002,
      f
    );
  }
  f = message.getRealtimeTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1003,
      f
    );
  }
  f = message.getRoutesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1009, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataFull.RouteInfo.serializeBinaryToWriter);
  }
  f = message.getStationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1010, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataFull.StationInfo.serializeBinaryToWriter);
  }
  f = message.getRoutehashLookupMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1011, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getStationhashLookupMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1012, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getTransfersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1015, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataFull.TransfersForStation.serializeBinaryToWriter);
  }
  f = message.getTripsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1016, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataFull.TripInfo.serializeBinaryToWriter);
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transit_data_access.DataFull.RouteInfo.repeatedFields_ = [1008];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.RouteInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.RouteInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.RouteInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: jspb.Message.getFieldWithDefault(msg, 1004, ""),
    color: jspb.Message.getFieldWithDefault(msg, 1005, 0),
    textColor: jspb.Message.getFieldWithDefault(msg, 1006, 0),
    stationsList: jspb.Message.getRepeatedField(msg, 1008)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.RouteInfo}
 */
proto.transit_data_access.DataFull.RouteInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.RouteInfo;
  return proto.transit_data_access.DataFull.RouteInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.RouteInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.RouteInfo}
 */
proto.transit_data_access.DataFull.RouteInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1004:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 1005:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColor(value);
      break;
    case 1006:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextColor(value);
      break;
    case 1008:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setStationsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.RouteInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.RouteInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.RouteInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      1004,
      f
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeUint32(
      1005,
      f
    );
  }
  f = message.getTextColor();
  if (f !== 0) {
    writer.writeUint32(
      1006,
      f
    );
  }
  f = message.getStationsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1008,
      f
    );
  }
};


/**
 * optional string desc = 1004;
 * @return {string}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1004, ""));
};


/** @param {string} value */
proto.transit_data_access.DataFull.RouteInfo.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 1004, value);
};


/**
 * optional uint32 color = 1005;
 * @return {number}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1005, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.RouteInfo.prototype.setColor = function(value) {
  jspb.Message.setProto3IntField(this, 1005, value);
};


/**
 * optional uint32 text_color = 1006;
 * @return {number}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.getTextColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1006, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.RouteInfo.prototype.setTextColor = function(value) {
  jspb.Message.setProto3IntField(this, 1006, value);
};


/**
 * repeated uint32 stations = 1008;
 * @return {!Array<number>}
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.getStationsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1008));
};


/** @param {!Array<number>} value */
proto.transit_data_access.DataFull.RouteInfo.prototype.setStationsList = function(value) {
  jspb.Message.setField(this, 1008, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.addStations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1008, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.transit_data_access.DataFull.RouteInfo.prototype.clearStationsList = function() {
  this.setStationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.StationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.StationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.StationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 11, ""),
    lat: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    lon: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    travelTimesMap: (f = msg.getTravelTimesMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataFull.StationInfo.TravelTime.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.StationInfo}
 */
proto.transit_data_access.DataFull.StationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.StationInfo;
  return proto.transit_data_access.DataFull.StationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.StationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.StationInfo}
 */
proto.transit_data_access.DataFull.StationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 15:
      var value = msg.getTravelTimesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataFull.StationInfo.TravelTime.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.StationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.StationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.StationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getTravelTimesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataFull.StationInfo.TravelTime.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.StationInfo.TravelTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.StationInfo.TravelTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    travelTime: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.StationInfo.TravelTime}
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.StationInfo.TravelTime;
  return proto.transit_data_access.DataFull.StationInfo.TravelTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.StationInfo.TravelTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.StationInfo.TravelTime}
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 14:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTravelTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.StationInfo.TravelTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.StationInfo.TravelTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTravelTime();
  if (f !== 0) {
    writer.writeSint32(
      14,
      f
    );
  }
};


/**
 * optional sint32 travel_time = 14;
 * @return {number}
 */
proto.transit_data_access.DataFull.StationInfo.TravelTime.prototype.getTravelTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.StationInfo.TravelTime.prototype.setTravelTime = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string name = 11;
 * @return {string}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.transit_data_access.DataFull.StationInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional float lat = 12;
 * @return {number}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.StationInfo.prototype.setLat = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float lon = 13;
 * @return {number}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.getLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.StationInfo.prototype.setLon = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * map<uint32, TravelTime> travel_times = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataFull.StationInfo.TravelTime>}
 */
proto.transit_data_access.DataFull.StationInfo.prototype.getTravelTimesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataFull.StationInfo.TravelTime>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      proto.transit_data_access.DataFull.StationInfo.TravelTime));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.StationInfo.prototype.clearTravelTimesMap = function() {
  this.getTravelTimesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.TransfersForStation.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.TransfersForStation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.TransfersForStation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TransfersForStation.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferTimesMap: (f = msg.getTransferTimesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.TransfersForStation}
 */
proto.transit_data_access.DataFull.TransfersForStation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.TransfersForStation;
  return proto.transit_data_access.DataFull.TransfersForStation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.TransfersForStation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.TransfersForStation}
 */
proto.transit_data_access.DataFull.TransfersForStation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1014:
      var value = msg.getTransferTimesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.TransfersForStation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.TransfersForStation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.TransfersForStation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TransfersForStation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferTimesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1014, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * map<uint32, uint32> transfer_times = 1014;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.transit_data_access.DataFull.TransfersForStation.prototype.getTransferTimesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1014, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.TransfersForStation.prototype.clearTransferTimesMap = function() {
  this.getTransferTimesMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.TripInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.TripInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TripInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    branch: (f = msg.getBranch()) && proto.transit_data_access.DataFull.TripInfo.Branch.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    arrivalsMap: (f = msg.getArrivalsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.TripInfo}
 */
proto.transit_data_access.DataFull.TripInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.TripInfo;
  return proto.transit_data_access.DataFull.TripInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.TripInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.TripInfo}
 */
proto.transit_data_access.DataFull.TripInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.transit_data_access.DataFull.TripInfo.Branch;
      reader.readMessage(value,proto.transit_data_access.DataFull.TripInfo.Branch.deserializeBinaryFromReader);
      msg.setBranch(value);
      break;
    case 7:
      var value = /** @type {!proto.transit_data_access.DataFull.TripInfo.TripStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = msg.getArrivalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.TripInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.TripInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TripInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBranch();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transit_data_access.DataFull.TripInfo.Branch.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getArrivalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * @enum {number}
 */
proto.transit_data_access.DataFull.TripInfo.TripStatus = {
  STOPPED: 0,
  DELAYED: 1,
  ON_TIME: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataFull.TripInfo.Branch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataFull.TripInfo.Branch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TripInfo.Branch.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeHash: jspb.Message.getFieldWithDefault(msg, 4, 0),
    finalStation: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataFull.TripInfo.Branch}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataFull.TripInfo.Branch;
  return proto.transit_data_access.DataFull.TripInfo.Branch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataFull.TripInfo.Branch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataFull.TripInfo.Branch}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRouteHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFinalStation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataFull.TripInfo.Branch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataFull.TripInfo.Branch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataFull.TripInfo.Branch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRouteHash();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFinalStation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 route_hash = 4;
 * @return {number}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.getRouteHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.setRouteHash = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 final_station = 5;
 * @return {number}
 */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.getFinalStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.TripInfo.Branch.prototype.setFinalStation = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Branch branch = 6;
 * @return {?proto.transit_data_access.DataFull.TripInfo.Branch}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.getBranch = function() {
  return /** @type{?proto.transit_data_access.DataFull.TripInfo.Branch} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataFull.TripInfo.Branch, 6));
};


/** @param {?proto.transit_data_access.DataFull.TripInfo.Branch|undefined} value */
proto.transit_data_access.DataFull.TripInfo.prototype.setBranch = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataFull.TripInfo.prototype.clearBranch = function() {
  this.setBranch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.hasBranch = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TripStatus status = 7;
 * @return {!proto.transit_data_access.DataFull.TripInfo.TripStatus}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.getStatus = function() {
  return /** @type {!proto.transit_data_access.DataFull.TripInfo.TripStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.transit_data_access.DataFull.TripInfo.TripStatus} value */
proto.transit_data_access.DataFull.TripInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint32 timestamp = 8;
 * @return {number}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.TripInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<uint32, uint32> arrivals = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.transit_data_access.DataFull.TripInfo.prototype.getArrivalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.TripInfo.prototype.clearArrivalsMap = function() {
  this.getArrivalsMap().clear();
};


/**
 * optional string name = 1001;
 * @return {string}
 */
proto.transit_data_access.DataFull.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1001, ""));
};


/** @param {string} value */
proto.transit_data_access.DataFull.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1001, value);
};


/**
 * optional uint32 static_timestamp = 1002;
 * @return {number}
 */
proto.transit_data_access.DataFull.prototype.getStaticTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1002, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.prototype.setStaticTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1002, value);
};


/**
 * optional uint32 realtime_timestamp = 1003;
 * @return {number}
 */
proto.transit_data_access.DataFull.prototype.getRealtimeTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1003, 0));
};


/** @param {number} value */
proto.transit_data_access.DataFull.prototype.setRealtimeTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1003, value);
};


/**
 * map<uint32, RouteInfo> routes = 1009;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataFull.RouteInfo>}
 */
proto.transit_data_access.DataFull.prototype.getRoutesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataFull.RouteInfo>} */ (
      jspb.Message.getMapField(this, 1009, opt_noLazyCreate,
      proto.transit_data_access.DataFull.RouteInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearRoutesMap = function() {
  this.getRoutesMap().clear();
};


/**
 * map<uint32, StationInfo> stations = 1010;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataFull.StationInfo>}
 */
proto.transit_data_access.DataFull.prototype.getStationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataFull.StationInfo>} */ (
      jspb.Message.getMapField(this, 1010, opt_noLazyCreate,
      proto.transit_data_access.DataFull.StationInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearStationsMap = function() {
  this.getStationsMap().clear();
};


/**
 * map<string, uint32> routehash_lookup = 1011;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.transit_data_access.DataFull.prototype.getRoutehashLookupMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1011, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearRoutehashLookupMap = function() {
  this.getRoutehashLookupMap().clear();
};


/**
 * map<string, uint32> stationhash_lookup = 1012;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.transit_data_access.DataFull.prototype.getStationhashLookupMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1012, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearStationhashLookupMap = function() {
  this.getStationhashLookupMap().clear();
};


/**
 * map<uint32, TransfersForStation> transfers = 1015;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataFull.TransfersForStation>}
 */
proto.transit_data_access.DataFull.prototype.getTransfersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataFull.TransfersForStation>} */ (
      jspb.Message.getMapField(this, 1015, opt_noLazyCreate,
      proto.transit_data_access.DataFull.TransfersForStation));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearTransfersMap = function() {
  this.getTransfersMap().clear();
};


/**
 * map<uint32, TripInfo> trips = 1016;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataFull.TripInfo>}
 */
proto.transit_data_access.DataFull.prototype.getTripsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataFull.TripInfo>} */ (
      jspb.Message.getMapField(this, 1016, opt_noLazyCreate,
      proto.transit_data_access.DataFull.TripInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataFull.prototype.clearTripsMap = function() {
  this.getTripsMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    realtimeTimestamp: jspb.Message.getFieldWithDefault(msg, 2000, 0),
    trips: (f = msg.getTrips()) && proto.transit_data_access.DataUpdate.TripDiff.toObject(includeInstance, f),
    arrivals: (f = msg.getArrivals()) && proto.transit_data_access.DataUpdate.ArrivalsDiff.toObject(includeInstance, f),
    statusMap: (f = msg.getStatusMap()) ? f.toObject(includeInstance, undefined) : [],
    branchMap: (f = msg.getBranchMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataUpdate.Branch.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate}
 */
proto.transit_data_access.DataUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate;
  return proto.transit_data_access.DataUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate}
 */
proto.transit_data_access.DataUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2000:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRealtimeTimestamp(value);
      break;
    case 2004:
      var value = new proto.transit_data_access.DataUpdate.TripDiff;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.TripDiff.deserializeBinaryFromReader);
      msg.setTrips(value);
      break;
    case 2013:
      var value = new proto.transit_data_access.DataUpdate.ArrivalsDiff;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.ArrivalsDiff.deserializeBinaryFromReader);
      msg.setArrivals(value);
      break;
    case 2014:
      var value = msg.getStatusMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    case 2015:
      var value = msg.getBranchMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataUpdate.Branch.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRealtimeTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2000,
      f
    );
  }
  f = message.getTrips();
  if (f != null) {
    writer.writeMessage(
      2004,
      f,
      proto.transit_data_access.DataUpdate.TripDiff.serializeBinaryToWriter
    );
  }
  f = message.getArrivals();
  if (f != null) {
    writer.writeMessage(
      2013,
      f,
      proto.transit_data_access.DataUpdate.ArrivalsDiff.serializeBinaryToWriter
    );
  }
  f = message.getStatusMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2014, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getBranchMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2015, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataUpdate.Branch.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.Branch.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.Branch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.Branch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Branch.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeHash: jspb.Message.getFieldWithDefault(msg, 4, 0),
    finalStation: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.Branch}
 */
proto.transit_data_access.DataUpdate.Branch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.Branch;
  return proto.transit_data_access.DataUpdate.Branch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.Branch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.Branch}
 */
proto.transit_data_access.DataUpdate.Branch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRouteHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFinalStation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.Branch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.Branch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.Branch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Branch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRouteHash();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getFinalStation();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 route_hash = 4;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.Branch.prototype.getRouteHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.Branch.prototype.setRouteHash = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 final_station = 5;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.Branch.prototype.getFinalStation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.Branch.prototype.setFinalStation = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.Trip.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.Trip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.Trip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Trip.toObject = function(includeInstance, msg) {
  var f, obj = {
    tripHash: jspb.Message.getFieldWithDefault(msg, 11, 0),
    info: (f = msg.getInfo()) && proto.transit_data_access.DataUpdate.Trip.TripInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.Trip}
 */
proto.transit_data_access.DataUpdate.Trip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.Trip;
  return proto.transit_data_access.DataUpdate.Trip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.Trip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.Trip}
 */
proto.transit_data_access.DataUpdate.Trip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTripHash(value);
      break;
    case 12:
      var value = new proto.transit_data_access.DataUpdate.Trip.TripInfo;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.Trip.TripInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.Trip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.Trip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.Trip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Trip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTripHash();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.transit_data_access.DataUpdate.Trip.TripInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.Trip.TripInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.Trip.TripInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    branch: (f = msg.getBranch()) && proto.transit_data_access.DataUpdate.Branch.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    arrivalsMap: (f = msg.getArrivalsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.Trip.TripInfo}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.Trip.TripInfo;
  return proto.transit_data_access.DataUpdate.Trip.TripInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.Trip.TripInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.Trip.TripInfo}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.transit_data_access.DataUpdate.Branch;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.Branch.deserializeBinaryFromReader);
      msg.setBranch(value);
      break;
    case 7:
      var value = /** @type {!proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = msg.getArrivalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.Trip.TripInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.Trip.TripInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBranch();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transit_data_access.DataUpdate.Branch.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getArrivalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * @enum {number}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus = {
  STOPPED: 0,
  DELAYED: 1,
  ON_TIME: 2
};

/**
 * optional Branch branch = 6;
 * @return {?proto.transit_data_access.DataUpdate.Branch}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.getBranch = function() {
  return /** @type{?proto.transit_data_access.DataUpdate.Branch} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataUpdate.Branch, 6));
};


/** @param {?proto.transit_data_access.DataUpdate.Branch|undefined} value */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.setBranch = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.clearBranch = function() {
  this.setBranch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.hasBranch = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TripStatus status = 7;
 * @return {!proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.getStatus = function() {
  return /** @type {!proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.transit_data_access.DataUpdate.Trip.TripInfo.TripStatus} value */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint32 timestamp = 8;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<uint32, uint32> arrivals = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.getArrivalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.Trip.TripInfo.prototype.clearArrivalsMap = function() {
  this.getArrivalsMap().clear();
};


/**
 * optional uint32 trip_hash = 11;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.Trip.prototype.getTripHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.Trip.prototype.setTripHash = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional TripInfo info = 12;
 * @return {?proto.transit_data_access.DataUpdate.Trip.TripInfo}
 */
proto.transit_data_access.DataUpdate.Trip.prototype.getInfo = function() {
  return /** @type{?proto.transit_data_access.DataUpdate.Trip.TripInfo} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataUpdate.Trip.TripInfo, 12));
};


/** @param {?proto.transit_data_access.DataUpdate.Trip.TripInfo|undefined} value */
proto.transit_data_access.DataUpdate.Trip.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataUpdate.Trip.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataUpdate.Trip.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transit_data_access.DataUpdate.TripDiff.repeatedFields_ = [2002,2003];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.TripDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.TripDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.TripDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    deletedList: jspb.Message.getRepeatedField(msg, 2002),
    addedList: jspb.Message.toObjectList(msg.getAddedList(),
    proto.transit_data_access.DataUpdate.Trip.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.TripDiff}
 */
proto.transit_data_access.DataUpdate.TripDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.TripDiff;
  return proto.transit_data_access.DataUpdate.TripDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.TripDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.TripDiff}
 */
proto.transit_data_access.DataUpdate.TripDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2002:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDeletedList(value);
      break;
    case 2003:
      var value = new proto.transit_data_access.DataUpdate.Trip;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.Trip.deserializeBinaryFromReader);
      msg.addAdded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.TripDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.TripDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.TripDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeletedList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2002,
      f
    );
  }
  f = message.getAddedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2003,
      f,
      proto.transit_data_access.DataUpdate.Trip.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deleted = 2002;
 * @return {!Array<number>}
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.getDeletedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2002));
};


/** @param {!Array<number>} value */
proto.transit_data_access.DataUpdate.TripDiff.prototype.setDeletedList = function(value) {
  jspb.Message.setField(this, 2002, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.addDeleted = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2002, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.clearDeletedList = function() {
  this.setDeletedList([]);
};


/**
 * repeated Trip added = 2003;
 * @return {!Array<!proto.transit_data_access.DataUpdate.Trip>}
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.getAddedList = function() {
  return /** @type{!Array<!proto.transit_data_access.DataUpdate.Trip>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transit_data_access.DataUpdate.Trip, 2003));
};


/** @param {!Array<!proto.transit_data_access.DataUpdate.Trip>} value */
proto.transit_data_access.DataUpdate.TripDiff.prototype.setAddedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2003, value);
};


/**
 * @param {!proto.transit_data_access.DataUpdate.Trip=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transit_data_access.DataUpdate.Trip}
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.addAdded = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2003, opt_value, proto.transit_data_access.DataUpdate.Trip, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.transit_data_access.DataUpdate.TripDiff.prototype.clearAddedList = function() {
  this.setAddedList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transit_data_access.DataUpdate.StationsList.repeatedFields_ = [2005];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.StationsList.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.StationsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.StationsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationHashList: jspb.Message.getRepeatedField(msg, 2005)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.StationsList}
 */
proto.transit_data_access.DataUpdate.StationsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.StationsList;
  return proto.transit_data_access.DataUpdate.StationsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.StationsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.StationsList}
 */
proto.transit_data_access.DataUpdate.StationsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2005:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setStationHashList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.StationsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.StationsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.StationsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationHashList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2005,
      f
    );
  }
};


/**
 * repeated uint32 station_hash = 2005;
 * @return {!Array<number>}
 */
proto.transit_data_access.DataUpdate.StationsList.prototype.getStationHashList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2005));
};


/** @param {!Array<number>} value */
proto.transit_data_access.DataUpdate.StationsList.prototype.setStationHashList = function(value) {
  jspb.Message.setField(this, 2005, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.transit_data_access.DataUpdate.StationsList.prototype.addStationHash = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2005, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.transit_data_access.DataUpdate.StationsList.prototype.clearStationHashList = function() {
  this.setStationHashList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.StationArrival.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.StationArrival.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.StationArrival} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationArrival.toObject = function(includeInstance, msg) {
  var f, obj = {
    stationHash: jspb.Message.getFieldWithDefault(msg, 2006, 0),
    arrivalTime: jspb.Message.getFieldWithDefault(msg, 2007, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.StationArrival}
 */
proto.transit_data_access.DataUpdate.StationArrival.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.StationArrival;
  return proto.transit_data_access.DataUpdate.StationArrival.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.StationArrival} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.StationArrival}
 */
proto.transit_data_access.DataUpdate.StationArrival.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2006:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStationHash(value);
      break;
    case 2007:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArrivalTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.StationArrival.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.StationArrival.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.StationArrival} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationArrival.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStationHash();
  if (f !== 0) {
    writer.writeUint32(
      2006,
      f
    );
  }
  f = message.getArrivalTime();
  if (f !== 0) {
    writer.writeUint32(
      2007,
      f
    );
  }
};


/**
 * optional uint32 station_hash = 2006;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.StationArrival.prototype.getStationHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2006, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.StationArrival.prototype.setStationHash = function(value) {
  jspb.Message.setProto3IntField(this, 2006, value);
};


/**
 * optional uint32 arrival_time = 2007;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.StationArrival.prototype.getArrivalTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2007, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.StationArrival.prototype.setArrivalTime = function(value) {
  jspb.Message.setProto3IntField(this, 2007, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.repeatedFields_ = [2008];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.StationArrivalsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.StationArrivalsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrivalList: jspb.Message.toObjectList(msg.getArrivalList(),
    proto.transit_data_access.DataUpdate.StationArrival.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.StationArrivalsList}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.StationArrivalsList;
  return proto.transit_data_access.DataUpdate.StationArrivalsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.StationArrivalsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.StationArrivalsList}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2008:
      var value = new proto.transit_data_access.DataUpdate.StationArrival;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.StationArrival.deserializeBinaryFromReader);
      msg.addArrival(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.StationArrivalsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.StationArrivalsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrivalList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2008,
      f,
      proto.transit_data_access.DataUpdate.StationArrival.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StationArrival arrival = 2008;
 * @return {!Array<!proto.transit_data_access.DataUpdate.StationArrival>}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.getArrivalList = function() {
  return /** @type{!Array<!proto.transit_data_access.DataUpdate.StationArrival>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transit_data_access.DataUpdate.StationArrival, 2008));
};


/** @param {!Array<!proto.transit_data_access.DataUpdate.StationArrival>} value */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.setArrivalList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2008, value);
};


/**
 * @param {!proto.transit_data_access.DataUpdate.StationArrival=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transit_data_access.DataUpdate.StationArrival}
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.addArrival = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2008, opt_value, proto.transit_data_access.DataUpdate.StationArrival, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.transit_data_access.DataUpdate.StationArrivalsList.prototype.clearArrivalList = function() {
  this.setArrivalList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.TripStationDict.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.TripStationDict.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.TripStationDict} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.TripStationDict.toObject = function(includeInstance, msg) {
  var f, obj = {
    tripStationDictMap: (f = msg.getTripStationDictMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataUpdate.StationsList.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.TripStationDict}
 */
proto.transit_data_access.DataUpdate.TripStationDict.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.TripStationDict;
  return proto.transit_data_access.DataUpdate.TripStationDict.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.TripStationDict} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.TripStationDict}
 */
proto.transit_data_access.DataUpdate.TripStationDict.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2009:
      var value = msg.getTripStationDictMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataUpdate.StationsList.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.TripStationDict.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.TripStationDict.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.TripStationDict} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.TripStationDict.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTripStationDictMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2009, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataUpdate.StationsList.serializeBinaryToWriter);
  }
};


/**
 * map<uint32, StationsList> trip_station_dict = 2009;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataUpdate.StationsList>}
 */
proto.transit_data_access.DataUpdate.TripStationDict.prototype.getTripStationDictMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataUpdate.StationsList>} */ (
      jspb.Message.getMapField(this, 2009, opt_noLazyCreate,
      proto.transit_data_access.DataUpdate.StationsList));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.TripStationDict.prototype.clearTripStationDictMap = function() {
  this.getTripStationDictMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_data_access.DataUpdate.ArrivalsDiff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_data_access.DataUpdate.ArrivalsDiff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: (f = msg.getDeleted()) && proto.transit_data_access.DataUpdate.TripStationDict.toObject(includeInstance, f),
    addedMap: (f = msg.getAddedMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataUpdate.StationArrivalsList.toObject) : [],
    modifiedMap: (f = msg.getModifiedMap()) ? f.toObject(includeInstance, proto.transit_data_access.DataUpdate.TripStationDict.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_data_access.DataUpdate.ArrivalsDiff}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_data_access.DataUpdate.ArrivalsDiff;
  return proto.transit_data_access.DataUpdate.ArrivalsDiff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_data_access.DataUpdate.ArrivalsDiff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_data_access.DataUpdate.ArrivalsDiff}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2010:
      var value = new proto.transit_data_access.DataUpdate.TripStationDict;
      reader.readMessage(value,proto.transit_data_access.DataUpdate.TripStationDict.deserializeBinaryFromReader);
      msg.setDeleted(value);
      break;
    case 2011:
      var value = msg.getAddedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataUpdate.StationArrivalsList.deserializeBinaryFromReader, 0);
         });
      break;
    case 2012:
      var value = msg.getModifiedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readSint32, jspb.BinaryReader.prototype.readMessage, proto.transit_data_access.DataUpdate.TripStationDict.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_data_access.DataUpdate.ArrivalsDiff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_data_access.DataUpdate.ArrivalsDiff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f != null) {
    writer.writeMessage(
      2010,
      f,
      proto.transit_data_access.DataUpdate.TripStationDict.serializeBinaryToWriter
    );
  }
  f = message.getAddedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2011, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataUpdate.StationArrivalsList.serializeBinaryToWriter);
  }
  f = message.getModifiedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2012, writer, jspb.BinaryWriter.prototype.writeSint32, jspb.BinaryWriter.prototype.writeMessage, proto.transit_data_access.DataUpdate.TripStationDict.serializeBinaryToWriter);
  }
};


/**
 * optional TripStationDict deleted = 2010;
 * @return {?proto.transit_data_access.DataUpdate.TripStationDict}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.getDeleted = function() {
  return /** @type{?proto.transit_data_access.DataUpdate.TripStationDict} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataUpdate.TripStationDict, 2010));
};


/** @param {?proto.transit_data_access.DataUpdate.TripStationDict|undefined} value */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.setDeleted = function(value) {
  jspb.Message.setWrapperField(this, 2010, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.clearDeleted = function() {
  this.setDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 2010) != null;
};


/**
 * map<uint32, StationArrivalsList> added = 2011;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataUpdate.StationArrivalsList>}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.getAddedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataUpdate.StationArrivalsList>} */ (
      jspb.Message.getMapField(this, 2011, opt_noLazyCreate,
      proto.transit_data_access.DataUpdate.StationArrivalsList));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.clearAddedMap = function() {
  this.getAddedMap().clear();
};


/**
 * map<sint32, TripStationDict> modified = 2012;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataUpdate.TripStationDict>}
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.getModifiedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataUpdate.TripStationDict>} */ (
      jspb.Message.getMapField(this, 2012, opt_noLazyCreate,
      proto.transit_data_access.DataUpdate.TripStationDict));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.ArrivalsDiff.prototype.clearModifiedMap = function() {
  this.getModifiedMap().clear();
};


/**
 * optional uint32 realtime_timestamp = 2000;
 * @return {number}
 */
proto.transit_data_access.DataUpdate.prototype.getRealtimeTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2000, 0));
};


/** @param {number} value */
proto.transit_data_access.DataUpdate.prototype.setRealtimeTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2000, value);
};


/**
 * optional TripDiff trips = 2004;
 * @return {?proto.transit_data_access.DataUpdate.TripDiff}
 */
proto.transit_data_access.DataUpdate.prototype.getTrips = function() {
  return /** @type{?proto.transit_data_access.DataUpdate.TripDiff} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataUpdate.TripDiff, 2004));
};


/** @param {?proto.transit_data_access.DataUpdate.TripDiff|undefined} value */
proto.transit_data_access.DataUpdate.prototype.setTrips = function(value) {
  jspb.Message.setWrapperField(this, 2004, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataUpdate.prototype.clearTrips = function() {
  this.setTrips(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataUpdate.prototype.hasTrips = function() {
  return jspb.Message.getField(this, 2004) != null;
};


/**
 * optional ArrivalsDiff arrivals = 2013;
 * @return {?proto.transit_data_access.DataUpdate.ArrivalsDiff}
 */
proto.transit_data_access.DataUpdate.prototype.getArrivals = function() {
  return /** @type{?proto.transit_data_access.DataUpdate.ArrivalsDiff} */ (
    jspb.Message.getWrapperField(this, proto.transit_data_access.DataUpdate.ArrivalsDiff, 2013));
};


/** @param {?proto.transit_data_access.DataUpdate.ArrivalsDiff|undefined} value */
proto.transit_data_access.DataUpdate.prototype.setArrivals = function(value) {
  jspb.Message.setWrapperField(this, 2013, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.transit_data_access.DataUpdate.prototype.clearArrivals = function() {
  this.setArrivals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transit_data_access.DataUpdate.prototype.hasArrivals = function() {
  return jspb.Message.getField(this, 2013) != null;
};


/**
 * map<uint32, uint32> status = 2014;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.transit_data_access.DataUpdate.prototype.getStatusMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2014, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.prototype.clearStatusMap = function() {
  this.getStatusMap().clear();
};


/**
 * map<uint32, Branch> branch = 2015;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.transit_data_access.DataUpdate.Branch>}
 */
proto.transit_data_access.DataUpdate.prototype.getBranchMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.transit_data_access.DataUpdate.Branch>} */ (
      jspb.Message.getMapField(this, 2015, opt_noLazyCreate,
      proto.transit_data_access.DataUpdate.Branch));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.transit_data_access.DataUpdate.prototype.clearBranchMap = function() {
  this.getBranchMap().clear();
};


goog.object.extend(exports, proto.transit_data_access);
